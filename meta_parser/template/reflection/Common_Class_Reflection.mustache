#pragma once

#include<string>
#include<vector>
#include<memory>
#include<cstddef>

#include "meta/Reflection/Reflection_Instance.h"
#include "meta/Reflection/Reflection_Register.h"

{{#Include_Define_List}}
#include "{{& Src_File_Path}}"
{{/Include_Define_List}}

{{#Class_Define_List}}
namespace {{Class_NameSpace}}{

    using std::string;
    using std::vector;
    using std::shared_ptr;
    using std::make_shared;
    using std::static_pointer_cast;

    using NameSpace_Core::NameSpace_Meta::NameSpace_Reflection::Reflection_Instance;

    using NameSpace_Core::NameSpace_Meta::NameSpace_Reflection::Class_Func_Tuple;
    using NameSpace_Core::NameSpace_Meta::NameSpace_Reflection::Class_Base_Class_Tuple;
    using NameSpace_Core::NameSpace_Meta::NameSpace_Reflection::Class_Field_Func_Tuple;
    using NameSpace_Core::NameSpace_Meta::NameSpace_Reflection::Class_Filed_CPPVector_Func_Tuple;

    using NameSpace_Core::NameSpace_Meta::NameSpace_Reflection::Reflection_Register;


    class Reflection_{{& Class_Display_Name}}_Operator {
    public:

        static const string Get_Class_{{& Class_Display_Name}}_Spelling(void){
            return string{"{{& Class_Spelling}}"};
        }

        static const string Get_Class_Displaying_Name(void){
            return string{"{{& Class_Display_Name}}"};            
        }

        {{#Class_Base_Class_Define_List}}
            static const vector<Reflection_Instance<void>> Get_Base_Class_{{& Class_Display_Name}}_Reflection_Instance_List(shared_ptr<void> Instance){
                vector<Reflection_Instance<void>> Table;

                    {{#Class_Base_Spelling_List}}
                        Table.emplace_back(string{"{{& Class_Base_Class_Spelling}}"},static_pointer_cast<{{& Class_Base_Class_Spelling}}>(Instance));
                    {{/Class_Base_Spelling_List}}

                return Table;
            }
        {{/Class_Base_Class_Define_List}}

        {{#Field_Define_List}}
            static const string Get_Field_{{& Field_Display_Name}}_Type_Spelling(void){
                return string{"{{& Field_Type_Spelling}}"};
            }

            static const string Get_Field_{{& Field_Display_Name}}_Spelling(void){
                return string{"{{& Field_Spelling}}"};
            }


            static const string Get_Field_{{& Field_Display_Name}}_Display_Name(void){
                return string{"{{& Field_Display_Name}}"};
            }

            static const void *const Get_Filed_{{& Field_Display_Name}}_Attribute(shared_ptr<void> Instance){
                return static_cast<void*>(&static_pointer_cast<{{& Class_Spelling}}>(Instance)->{{& Field_Spelling}});
            }

            static void Set_Field_{{& Field_Display_Name}}_Attribute(shared_ptr<void> Instance, const void * Value){
                static_pointer_cast<{{& Class_Spelling}}>(Instance)->{{& Field_Spelling}}=*static_cast<const {{& Field_Type_Spelling}}*>(Value);
            }

            static const bool Is_Filed_{{& Field_Display_Name}}_CPPVector(void){
                return {{#Filed_Is_CPPVector}} ! {{/Filed_Is_CPPVector}} false;
            }

            {{#Filed_CPPVector_Define_List}}
                static const string Get_Field_{{& Field_Display_Name}}_CPPVector_Element_Type_Spelling(void){
                    return string {"{{& Field_Spelling}}"};
                }

                static const size_t Get_Field_{{& Field_Display_Name}}_CPPVector_Capacity(shared_ptr<void> Instance){
                    return static_pointer_cast<{{& Class_Spelling}}>(Instance)->{{& Field_Spelling}}.capacity();
                }

                static const size_t Get_Field_{{& Field_Display_Name}}_CPPVector_Size(shared_ptr<void> Instance){
                    return static_pointer_cast<{{& Class_Spelling}}>(Instance)->{{& Field_Spelling}}.size();
                }

                static const void *Get_Field_{{& Field_Display_Name}}_CPPVector_Element(shared_ptr<void> Instance, size_t Index){
                    return static_cast<const void*>(&static_pointer_cast<{{& Class_Spelling}}>(Instance)->{{& Field_Spelling}}[Index]);
                }

                static void Set_Field_{{& Field_Display_Name}}_CPPVector_Element(shared_ptr<void> Instance, size_t Index,const void* Value){
                    static_pointer_cast<{{& Class_Spelling}}>(Instance)->{{& Field_Spelling}}[Index]=*static_cast<const {{& Filed_CPPVector_Element_Type_Spelling}}*>(Value);
                }
            {{/Filed_CPPVector_Define_List}}

        {{/Field_Define_List}}

            static void TypeWrapper_Rigster(void){
                shared_ptr<Class_Func_Tuple> Temp_Class_Func_Tuple{nullptr};
                shared_ptr<Class_Base_Class_Tuple> Temp_Class_Base_Class_Tuple{nullptr};
                shared_ptr<std::unordered_map<string, shared_ptr<Class_Field_Func_Tuple>>> Temp_Class_Field_Func_Tuple_Map{nullptr};
                shared_ptr<std::unordered_map<string, shared_ptr<Class_Filed_CPPVector_Func_Tuple>>> Temp_Class_Filed_CPPVector_Func_Tuple_Map{nullptr};

                Temp_Class_Func_Tuple = make_shared<Class_Func_Tuple>(
                    Reflection_{{& Class_Display_Name}}_Operator::Get_Class_{{& Class_Display_Name}}_Spelling,
                    Reflection_{{& Class_Display_Name}}_Operator::Get_Class_Displaying_Name
                );

            {{#Class_Base_Class_Define_List}}
                Temp_Class_Base_Class_Tuple = make_shared<Class_Base_Class_Tuple>(
                    Reflection_{{& Class_Display_Name}}_Operator::Get_Base_Class_{{& Class_Display_Name}}_Reflection_Instance_List
                );
            {{/Class_Base_Class_Define_List}}

            {{#Field_Define_List}}
                    Temp_Class_Field_Func_Tuple_Map->emplace(
                    string{"{{& Field_Spelling}}"},
                    make_shared<Class_Field_Func_Tuple>(
                        Reflection_{{& Class_Display_Name}}_Operator::Get_Field_{{& Field_Display_Name}}_Type_Spelling,
                        Reflection_{{& Class_Display_Name}}_Operator::Get_Field_{{& Field_Display_Name}}_Spelling,
                        Reflection_{{& Class_Display_Name}}_Operator::Get_Field_{{& Field_Display_Name}}_Display_Name,
                        Reflection_{{& Class_Display_Name}}_Operator::Get_Filed_{{& Field_Display_Name}}_Attribute,
                        Reflection_{{& Class_Display_Name}}_Operator::Set_Field_{{& Field_Display_Name}}_Attribute,
                        Reflection_{{& Class_Display_Name}}_Operator::Is_Filed_{{& Field_Display_Name}}_CPPVector
                    )
                );

                {{#Filed_CPPVector_Define_List}}
                    Temp_Class_Filed_CPPVector_Func_Tuple_Map->emplace(
                    string{"{{& Field_Spelling}}"},
                        make_shared<Class_Filed_CPPVector_Func_Tuple>( 
                            Reflection_{{& Class_Display_Name}}_Operator::Get_Field_{{& Field_Display_Name}}_CPPVector_Element_Type_Spelling,
                            Reflection_{{& Class_Display_Name}}_Operator::Get_Field_{{& Field_Display_Name}}_CPPVector_Capacity,
                            Reflection_{{& Class_Display_Name}}_Operator::Get_Field_{{& Field_Display_Name}}_CPPVector_Size,
                            Reflection_{{& Class_Display_Name}}_Operator::Get_Field_{{& Field_Display_Name}}_CPPVector_Element,
                            Reflection_{{& Class_Display_Name}}_Operator::Set_Field_{{& Field_Display_Name}}_CPPVector_Element
                        )
                    );
                {{/Filed_CPPVector_Define_List}}

            {{/Field_Define_List}}
                
            Reflection_Register::Get_Instance().Register_Class(string{"{{& Class_Spelling}}"},Temp_Class_Func_Tuple);
            Reflection_Register::Get_Instance().Register_Class_Base_Class(string{"{{& Class_Spelling}}"},Temp_Class_Base_Class_Tuple);
            Reflection_Register::Get_Instance().Register_Class_Filed(string{"{{& Class_Spelling}}"},Temp_Class_Field_Func_Tuple_Map);
            Reflection_Register::Get_Instance().Register_Class_Field_CPPVector(string{"{{& Class_Spelling}}"},Temp_Class_Filed_CPPVector_Func_Tuple_Map);
        }

    };
   
}// NameSpace_Core::NameSpace_Meta::NameSpace_Generated::NameSpace_Reflection

 {{/Class_Define_List}}